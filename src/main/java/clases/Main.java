/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;
import java.util.Collections;

public class Main {
    
    public static void main (String [] args) {
    	
    	ArrayList<Libro> catalogo = new ArrayList<Libro>();
    	
    	while(true) {
    		int opcion = menu();
    		switch (opcion) {
			case 1:
				//TODO Alta de Libro
				//titulo:isbn:genero:autor:paginas
				alta(catalogo);
				break;
			case 2:
				//TODO Lista de Libros
				listar(catalogo);
				break;
				
			case 3:
				//TODO Baja de libro
				baja(catalogo);
				break;
				
			case 4:
				//TODO Buscar libro
				buscarLibro(catalogo);
				break;
				
			case 5:
				//TODO Ordenar libro
				ordenaLibro(catalogo);
				break;
				
			case 6:
				//TODO Salvar a Fichero
				salvarFichero(catalogo);
				break;
				
			case 7:
				//TODO Cargar Fichero
				cargarFichero();
				break;
				
			case 8:
				//TODO Limpiar Catalogo
				limpiarCatalogo(catalogo);
				break;
			default:
				break;
			}
    	}
    }
    
    private static int menu() {
    	int opcion=0;
    	
    	do {
    		System.out.println("Opciones:");
    		System.out.println("1. Alta de Libro");
    		System.out.println("2. Lista de Libros");
    		System.out.println("3. Baja de Libros");
    		System.out.println("4. Búsqueda de Libros");
    		System.out.println("5. Ordenacion de Libros");
    		System.out.println("6. Guardar Libros en fichero .txt");
    		System.out.println("7. Cargar fichero .txt");
    		System.out.println("8. Limpiar catalogo");
    		System.out.println("Introduce la opcion:");
    	
    		opcion = leerOpcion(8);
    		
    	}while(opcion <=0);
    	
    	return opcion;
    }
    
    private static int leerOpcion(int max) {
    	int opcion = -1;
    	try {
    		Scanner teclado = new Scanner(System.in);
    		opcion = teclado.nextInt();
    		if(opcion>max)
    			opcion=-1;
    		
    	}catch (InputMismatchException e) {
			System.out.println("Opción incorrecta");
		}
    	
    	return opcion;
    }
    
    private static void alta(ArrayList<Libro> catalogo) {
    	//Leer de la entrada
    	String datosLibro = obtenerDatosLibro();
    	//titulo:isbn:genero:autor:paginas
    	//Procesar la entrada
    	Libro libro = procesaEntrada(datosLibro);
    	//Crear el libro con los datos de la entrada
    	catalogo.add(libro);
    	
    	//Meter el libro en el catalogo
    }
    
    private static String obtenerDatosLibro() {
    	String datos=null;
    	
    	boolean validado=false;
    	while(!validado) {
    		System.out.println("Introduce los datos de un libro.");
    		System.out.println("Usa el formato \"titulo:isbn:genero:autor:paginas\"");
    		try {
    			datos = leerCadena();
    			if(true)//Supongo de momento que valida siempre
    				validado=true;
    		}catch (InputMismatchException e) {
				System.out.println("Datos de entrada no válidos");
			}
    	}
    	
    	return datos;
    }
    
    private static Libro procesaEntrada(String entrada) {
    	
    	String [] datos = entrada.split(":");
    	
    	String titulo = datos[0];
    	String isbn = datos[1];
    	Genero genero = Genero.getGenero(datos[2]);
    	String autor = datos[3];
    	Integer paginas = Integer.parseInt(datos[4]);

    	Libro libro = new Libro(titulo, isbn, genero, autor, paginas);
    	
    	return libro;
    }
    
    private static String leerCadena() {
    	String opcion = null;
    	Scanner teclado = new Scanner(System.in);
        opcion=teclado.nextLine();
        
    	return opcion;
    }
    
    private static void listar(ArrayList<Libro> catalogo) {
    	int n = 0;
    	for (int i = 0; i < catalogo.size(); i++) {
    		n = n + 1;
    		System.out.println("Nº: " + n);
			System.out.println(catalogo.get(i)+"\n");
		}
    }
    
    private static ArrayList<Libro> baja(ArrayList<Libro> catalogo) {
    	
    	int numlibro = 0;
    	Scanner teclado = new Scanner(System.in);
    	
    	System.out.println("¿Qué número de libro quieres borrar?");
    	numlibro = teclado.nextInt() - 1;
    	
    	if(Libro.comprobarBaja(numlibro, catalogo.size())) {
    	    catalogo.remove(numlibro);
    	}
    	
		return catalogo;
    }
    
    private static ArrayList<Libro> buscarLibro(ArrayList<Libro> catalogo) {
    	
    	String isb = "";
    	
    	Scanner teclado = new Scanner(System.in);

    	System.out.println("¿Qué ISBN quieres buscar?");
    	isb = teclado.next();
    	
    	Libro libro = new Libro();
    	libro.setIsbn(isb);
    	
    	int posicion = catalogo.indexOf(libro);
    	
    	
    	if (posicion < 0) {
			System.out.println("Libro no encontrado");
		} else {
			System.out.println("Libro encontrado");
			System.out.println(catalogo.get(posicion));
		}
    	
    	
		return catalogo;
    	
    }
    
    private static void ordenaLibro(ArrayList<Libro> catalogo) {
    	
    	int opcion = 0;
    	
    	Scanner teclado = new Scanner(System.in);
    	
    	System.out.println("¿Desea ordenar por título o por Nº de páginas?");
    	System.out.println("1. Título");
    	System.out.println("2. Nº de páginas");
    	opcion = teclado.nextInt();
    	
    	switch(opcion) {
    		case 1:
    			Collections.sort(catalogo);
    			System.out.println("Catalogo ordenado por título\n");
    			listar(catalogo);
    			break;
    		case 2:
    			Collections.sort(catalogo, new Libro());
    			System.out.println("Catalogo ordenado por Nº de páginas\n");
    			listar(catalogo);
    			break;
    		default:
    			break;
    	}
    }
    
    private static void salvarFichero(ArrayList<Libro> catalogo) {
    	
    	String nombretxt = "";
    	
    	Scanner teclado = new Scanner(System.in);
    	
    	System.out.println("Nombre a guardar el fichero con extension .txt");
    	nombretxt = teclado.next();
    	
		try {
			
			FileWriter escribir = new FileWriter("/home/alumno/Escritorio/librosGuardados/" + nombretxt);

			// Escribimos linea a linea en el fichero
			for (Libro libro : catalogo) {
				escribir.write(libro.toStringFichero() + "\n");
			}
			System.out.println("El catalogo se ha guardado en el fichero correctamente\n");
			escribir.close();

		} catch (Exception ex) {
			System.out.println("Error: el fichero no se ha guardado correctamente " + ex.getMessage());
		}
    }
    
    private static void cargarFichero() {
    	
    	
    	String nombretxt = "";
    	
    	Scanner teclado = new Scanner(System.in);
    	
    	System.out.println("Nombre del fichero a cargar con extension .txt");
    	nombretxt = teclado.next();
    	
    	// Fichero del que queremos leer
    	File fichero = new File("/home/alumno/Escritorio/librosGuardados/" + nombretxt );
    	Scanner s = null;

    	try {
    		// Leemos el contenido del fichero
    		System.out.println("... Leyendo el contenido del fichero ...\n");
    		s = new Scanner(fichero);

    		// Leemos linea a linea el fichero
    		while (s.hasNextLine()) {
    			String linea = s.nextLine(); 	// Guardamos la linea en un String
    			System.out.println(linea);      // Imprimimos la linea
    		}
    		System.out.println();

    	} catch (Exception ex) {
    		System.out.println("Mensaje: " + ex.getMessage());
    	} finally {
    		// Cerramos el fichero tanto si la lectura ha sido correcta o no
    		try {
    			if (s != null)
    				s.close();
    		} catch (Exception ex2) {
    			System.out.println("Mensaje 2: " + ex2.getMessage());
    		}
    	}
    }
    
    private static ArrayList<Libro> limpiarCatalogo(ArrayList<Libro> catalogo) {
    	
    	System.out.println("Catalogo vacío\n");
    	catalogo.clear();
    	
    	return catalogo;
    }
}
